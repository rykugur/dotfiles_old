-- {{{ doug piston's rc.lua
-- Modified:     06/02/2012
-- Most of the config was taken from: https://bbs.archlinux.org/viewtopic.php?id=88926
-- Then Modified to my needs.
-- Get your weather code for the wether widget at http://weather.noaa.gov/
-- }}}

-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")
-- Widgets
require("vicious")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.add_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = err })
        in_error = false
    end)
end
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
 beautiful.init("/home/jarvis/.config/awesome/themes/Zoltan/theme.lua")

-- This is used later as the default terminal and editor to run.
terminal = "urxvt"
editor = os.getenv("EDITOR") or "vim"
editor_cmd = terminal .. " -e " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier
}
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag(
--     { "⢷", "⣨", "⡪", "⣌", "⣪", "⡝"}, s,
     { "chat", "www", "files", "email", "misc"}, s,
    {layouts[2], layouts[2], layouts[7], -- Tags: 1, 2, 3
     layouts[7], layouts[4], layouts[4], --       4, 5 ,6
     layouts[1], layouts[1], layouts[1]  --       7, 8, 9
    })
end

-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu

editors = {
   { "vim", terminal .. " -e vim" },
   { "gimp", "gimp" }
}
media = {
   { "music", terminal .. " -e ncmpcpp" },
   { "vids", "gnome-mplayer" }
}
power = {
   { "reboot", terminal .. " -e sudo reboot" },
   { "power off", terminal .. " -e sudo poweroff" }
}
inet = {
   { "web" , "firefox" }
}

mymainmenu = awful.menu({ items = { { "editors", editors },
 				                    { "media", media },
			                        { "intertubes", inet },
                                    { "files", "nautilus" },
				                    { "power", power }
                                                         }
                        })

mylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
-- }}}

-- {{{ Wibox

-- Weather widget
weatherwidget = widget({ type = "textbox" })
weather_t = awful.tooltip({ objects = { weatherwidget },})
vicious.register(weatherwidget, vicious.widgets.weather,
        function (widget, args)
            weather_t:set_text("City: " .. args["{city}"] .."\nWind: " .. args["{windmph}"] .. " mp/h " .. args["{wind}"] .. "\nSky: " .. args["{sky}"] .. "\nHumidity: " .. args["{humid}"] .. "%")
            return args["{tempf}"] .. "F"
        end, 1800, "KPAE")
        --'1800': check every 30 minutes.
        --'KPAE': the Everett ICAO code.

-- Create a textclock widget
mytextclock = awful.widget.textclock({ align = "right" }, '  %D %l:%M%P ')

-- Calendar widget to attach to the textclock
require('calendar2')
calendar2.addCalendarToWidget(mytextclock)

-- Temp Icon
tempicon = widget({ type = "imagebox" })
tempicon.image = image(beautiful.widget_temp)

-- Temp Widget
tempwidget = widget({ type = "textbox" })
vicious.register(tempwidget, vicious.widgets.thermal, "$1C", 9, "thermal_zone0")

-- gmail widget
mygmail = widget({ type = "textbox" })
gmail_t = awful.tooltip({ objects = { mygmail },})
mygmailimg = widget({ type = "imagebox" })
mygmailimg.image = image(beautiful.widget_gmail)
vicious.register(mygmail, vicious.widgets.gmail,
        function (widget, args)
            gmail_t:set_text(args["{subject}"])
            gmail_t:add_to_object(mygmailimg)
                    return args["{count}"]
         end, 240) 
        --the '240' here means check every 4 minutes.

-- Pacman Icon
pacicon = widget({type = "imagebox" })
pacicon.image = image(beautiful.widget_pac)

-- Pacman Widget
pacwidget = widget({type = "textbox"})
pacwidget_t = awful.tooltip({ objects = { pacwidget},})
vicious.register(pacwidget, vicious.widgets.pkg,
        function(widget,args)
            local io = { popen = io.popen }
            local s = io.popen("pacman -Qu")
            local str = ''
            for line in s:lines() do
                str = str .. line .. "\n"
            end
        pacwidget_t:set_text(str)
        s:close()
             return " " .. args[1]
        end, 1800, "Arch")
--'1800' means check every 30 minutes

-- CPU Icon
cpuicon = widget({ type = "imagebox" })
cpuicon.image = image(beautiful.widget_cpu)
-- CPU Widget
cpubar = awful.widget.progressbar()
cpubar:set_width(50)
cpubar:set_height(6)
cpubar:set_vertical(false)
cpubar:set_background_color("#434343")
cpubar:set_gradient_colors({ beautiful.fg_normal, beautiful.fg_normal, beautiful.fg_normal, beautiful.bar })
vicious.register(cpubar, vicious.widgets.cpu, "$1", 7)
awful.widget.layout.margins[cpubar.widget] = { top = 6 }

-- BATT Icon
baticon = widget ({type = "imagebox" })
baticon.image = image(beautiful.widget_batt)

-- Initialize BATT widget
batwidget = awful.widget.progressbar()
batwidget:set_width(50)
batwidget:set_height(6)
batwidget:set_vertical(false)
batwidget:set_background_color("#434343")
batwidget:set_border_color(nil)
batwidget:set_gradient_colors({ beautiful.fg_normal, beautiful.fg_normal, beautiful.fg_normal, beautiful.bar })
awful.widget.layout.margins[batwidget.widget] = { top = 6 }
vicious.register(batwidget, vicious.widgets.bat, "$2", 120, "BAT1")

-- Vol Icon
volicon = widget ({type = "imagebox" })
volicon.image = image(beautiful.widget_vol)

-- Vol bar Widget
volbar = awful.widget.progressbar()
volbar:set_width(50)
volbar:set_height(6)
volbar:set_vertical(false)
volbar:set_background_color("#434343")
volbar:set_border_color(nil)
volbar:set_gradient_colors({ beautiful.fg_normal, beautiful.fg_normal, beautiful.fg_normal, beautiful.bar })
awful.widget.layout.margins[volbar.widget] = { top = 6 }
vicious.register(volbar, vicious.widgets.volume,  "$1",  1, "Master")

-- MEM icon
memicon = widget ({type = "imagebox" })
memicon.image = image(beautiful.widget_mem)

-- Initialize MEMBar widget
membar = awful.widget.progressbar()
membar:set_width(50)
membar:set_height(6)
membar:set_vertical(false)
membar:set_background_color("#434343")
membar:set_border_color(nil)
membar:set_gradient_colors({ beautiful.fg_normal, beautiful.fg_normal, beautiful.fg_normal, beautiful.bar })
awful.widget.layout.margins[membar.widget] = { top = 6 }
vicious.register(membar, vicious.widgets.mem, "$1", 13)

-- MPD Icon
mpdicon = widget({ type = "imagebox" })
mpdicon.image = image(beautiful.widget_mpd)

-- Initialize MPD Widget
mpdwidget = widget({ type = "textbox" })
vicious.register(mpdwidget, vicious.widgets.mpd,
        function (widget, args)
            if args["{state}"] == "Stop" then 
                return " - "
            else 
                return args["{Artist}"]..' - '.. args["{Title}"]
            end
        end, 10)

-- Spacers
rbracket = widget({type = "textbox" })
rbracket.text = "]"
lbracket = widget({type = "textbox" })
lbracket.text = "["

-- Space
space = widget({ type = "textbox" })
space.text = ""

-- Space2
space2 = widget({ type = "textbox" })
space2.text = " "

-- MPD controls
music_play = awful.widget.launcher({
    image = beautiful.widget_play,
    command = "ncmpcpp toggle && echo -e 'vicious.force({ mpdwidget, })' | awesome-client"
})

music_pause = awful.widget.launcher({
    image = beautiful.widget_pause,
    command = "ncmpcpp toggle && echo -e 'vicious.force({ mpdwidget, })' | awesome-client"
})
music_pause.visible = false

music_stop = awful.widget.launcher({
    image = beautiful.widget_stop,
    command = "ncmpcpp stop && echo -e 'vicious.force({ mpdwidget, })' | awesome-client"
})

music_prev = awful.widget.launcher({
    image = beautiful.widget_prev,
    command = "ncmpcpp prev && echo -e 'vicious.force({ mpdwidget, })' | awesome-client"
})

music_next = awful.widget.launcher({
    image = beautiful.widget_next,
    command = "ncmpcpp next && echo -e 'vicious.force({ mpdwidget, })' | awesome-client"
})

-- Create a systray
mysystray = widget({ type = "systray" })

-- Create a wibox for each screen and add it
mywibox = {}
mybottomwibox = {}
mystatusbar = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
awful.button({ }, 1, awful.tag.viewonly),
awful.button({ modkey }, 1, awful.client.movetotag),
awful.button({ }, 3, awful.tag.viewtoggle),
awful.button({ modkey }, 3, awful.client.toggletag),
awful.button({ }, 4, awful.tag.viewnext),
awful.button({ }, 5, awful.tag.viewprev)
)
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
awful.button({ }, 1, function (c)
    if c == client.focus then
        c.minimized = true
    else
        if not c:isvisible() then
            awful.tag.viewonly(c:tags()[1])
        end
        -- This will also un-minimize
        -- the client, if needed
        client.focus = c
        c:raise()
    end
end),
awful.button({ }, 3, function ()
    if instance then
        instance:hide()
        instance = nil
    else
        instance = awful.menu.clients({ width=250 })
    end
end),
awful.button({ }, 4, function ()
    awful.client.focus.byidx(1)
    if client.focus then client.focus:raise() end
end),
awful.button({ }, 5, function ()
    awful.client.focus.byidx(-1)
    if client.focus then client.focus:raise() end
end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
    awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
    awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
    awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
    awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
        return awful.widget.tasklist.label.currenttags(c, s)
    end, mytasklist.buttons)

    -- Create the upper wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s, border_color = beautiful.border_focus, border_width = beautiful.border_width })

    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            mylauncher,
            mytaglist[s],
            mypromptbox[s],
            layout = awful.widget.layout.horizontal.leftright
        },
        mylayoutbox[s],
        mytextclock,
        weatherwidget,
        space2,
        s == 1 and mysystray or nil,
        mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }
    mybottomwibox[s] = awful.wibox({ position = "bottom", screen = s, border_width = 0, height = 18, border_color = beautiful.border_focus, border_width = beautiful.border_width })

    mybottomwibox[s].widgets = {
        {
            space, lbracket, space,
            cpuicon, space, cpubar,
            space, rbracket, space,
            lbracket, space, memicon,
            space, membar, space,
            rbracket, space, lbracket,
            space, baticon, space,
            batwidget, space, rbracket,
            space, lbracket, space, volicon,
            space, volbar, space, rbracket,
            layout = awful.widget.layout.horizontal.leftright
        },
            space, rbracket, space,
            tempwidget, space, tempicon,
            space, lbracket, space,
            rbracket, space, pacwidget,
            pacicon, space, lbracket,
            space, rbracket, space,
            mygmail, space, mygmailimg,
            space, lbracket, space,
            rbracket, space, music_stop,
            music_pause, music_play, music_next,
            music_prev, space, mpdwidget,
            space, mpdicon, space, lbracket, 
        layout = awful.widget.layout.horizontal.rightleft
    }
end

-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
awful.button({ }, 3, function () mymainmenu:toggle() end),
awful.button({ }, 4, awful.tag.viewnext),
awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

awful.key({ modkey,           }, "j",
function ()
    awful.client.focus.byidx( 1)
    if client.focus then client.focus:raise() end
end),
awful.key({ modkey,           }, "k",
function ()
    awful.client.focus.byidx(-1)
    if client.focus then client.focus:raise() end
end),
awful.key({ modkey,           }, "w", function () mymainmenu:show({keygrabber=true}) end),

-- Layout manipulation
awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
awful.key({ modkey,           }, "Tab",
function ()
    awful.client.focus.history.previous()
    if client.focus then
        client.focus:raise()
    end
end),

-- Volume up
awful.key({ }, "XF86AudioRaiseVolume", function ()
    awful.util.spawn("amixer set Master 5%+") end),

-- Volume down
awful.key({ }, "XF86AudioLowerVolume", function ()
    awful.util.spawn("amixer set Master 5%-") end),
        
-- Volume mute    
awful.key({ }, "XF86AudioMute", function ()
    awful.util.spawn("amixer set Master toggle") end),

-- Brightness for this POS Samsung

-- Down
awful.key({ }, "XF86MonBrightnessDown", function ()
    awful.util.spawn("xbacklight -dec 15") end),

-- Up, bigger value cause up is fukt
awful.key({ }, "XF86MonBrightnessUp", function ()
    awful.util.spawn("xbacklight -inc 25") end),

            -- Standard program
            awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
            awful.key({ modkey,           }, "d", function () awful.util.spawn("firefox") end),
            awful.key({ modkey, "Shift"   }, "f", function () awful.util.spawn("nautilus") end),
            awful.key({ modkey, "Control" }, "r", awesome.restart),
            awful.key({ modkey, "Shift"   }, "q", awesome.quit),

            awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
            awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
            awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
            awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
            awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
            awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
            awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
            awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

            awful.key({ modkey, "Control" }, "n", awful.client.restore),

            -- Prompt
            awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),

            awful.key({ modkey }, "x",
            function ()
                awful.prompt.run({ prompt = "Run Lua code: " },
                mypromptbox[mouse.screen].widget,
                awful.util.eval, nil,
                awful.util.getdir("cache") .. "/history_eval")
            end)
            )


            clientkeys = awful.util.table.join(
            awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
            awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
            awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
            awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
            awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
            awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
            awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
            awful.key({ modkey,           }, "n",
            function (c)
                -- The client currently has the input focus, so it cannot be
                -- minimized, since minimized clients can't have the focus.
                c.minimized = true
            end),
            awful.key({ modkey,           }, "m",
            function (c)
                c.maximized_horizontal = not c.maximized_horizontal
                c.maximized_vertical   = not c.maximized_vertical
            end)
            )

            -- Compute the maximum number of digit we need, limited to 9
            keynumber = 0
            for s = 1, screen.count() do
                keynumber = math.min(9, math.max(#tags[s], keynumber));
            end

            -- Bind all key numbers to tags.
            -- Be careful: we use keycodes to make it works on any keyboard layout.
            -- This should map on the top row of your keyboard, usually 1 to 9.
            for i = 1, keynumber do
                globalkeys = awful.util.table.join(globalkeys,
                awful.key({ modkey }, "#" .. i + 9,
                function ()
                    local screen = mouse.screen
                    if tags[screen][i] then
                        awful.tag.viewonly(tags[screen][i])
                    end
                end),
                awful.key({ modkey, "Control" }, "#" .. i + 9,
                function ()
                    local screen = mouse.screen
                    if tags[screen][i] then
                        awful.tag.viewtoggle(tags[screen][i])
                    end
                end),
                awful.key({ modkey, "Shift" }, "#" .. i + 9,
                function ()
                    if client.focus and tags[client.focus.screen][i] then
                        awful.client.movetotag(tags[client.focus.screen][i])
                    end
                end),
                awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                function ()
                    if client.focus and tags[client.focus.screen][i] then
                        awful.client.toggletag(tags[client.focus.screen][i])
                    end
                end))
            end

            clientbuttons = awful.util.table.join(
            awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
            awful.button({ modkey }, 1, awful.mouse.client.move),
            awful.button({ modkey }, 3, awful.mouse.client.resize))

            -- Set keys
            root.keys(globalkeys)
            -- }}}

            -- {{{ Rules
            awful.rules.rules = {
                -- All clients will match this rule.
                { rule = { },
                properties = { border_width = beautiful.border_width,
                border_color = beautiful.border_normal,
                focus = true,
                size_hints_honor = false,
                keys = clientkeys,
                buttons = clientbuttons } },
                { rule = { class = "MPlayer" },
                properties = { floating = true } },
                { rule = { class = "pinentry" },
                properties = { floating = true } },
                { rule = { class = "gimp" },
                properties = { floating = true } },
                -- Set Firefox to always map on tags number 2 of screen 1.
                -- { rule = { class = "Firefox" },
                --   properties = { tag = tags[1][2] } },
            }
            -- }}}

            -- {{{ Signals
            -- Signal function to execute when a new client appears.
            client.add_signal("manage", function (c, startup)
                -- Add a titlebar
                -- awful.titlebar.add(c, { modkey = modkey })

                -- Enable sloppy focus
                c:add_signal("mouse::enter", function(c)
                    if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
                        and awful.client.focus.filter(c) then
                        client.focus = c
                    end
                end)

                if not startup then
                    -- Set the windows at the slave,
                    -- i.e. put it at the end of others instead of setting it master.
                    awful.client.setslave(c)

                    -- Put windows in a smart way, only if they does not set an initial position.
                    if not c.size_hints.user_position and not c.size_hints.program_position then
                        awful.placement.no_overlap(c)
                        awful.placement.no_offscreen(c)
                    end
                end
            end)

            -- disable startup-notification globally
            local oldspawn = awful.util.spawn
            awful.util.spawn = function (s)
                oldspawn(s, false)
            end

            client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
            client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
            -- }}}
