-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")
-- libs
require("vicious")
require("wicked")

-- Load Debian menu entries
require("debian.menu")

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
beautiful.init("/usr/share/awesome/themes/colorful/theme.lua")

-- This is used later as the default terminal and editor to run.
terminal = "x-terminal-emulator"
editor = os.getenv("EDITOR") or "editor"
editor_cmd = terminal .. " -e " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    --awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    --awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier
}
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
--tags = {
--   names  = { "1:main", "2:web", "3:video", "4:share", "5:code", "6:misc", "7:gimp" },
--   layout = { layouts[5], layouts[3], layouts[5], layouts[5], layouts[5],
--              layouts[10], layouts[1]
--}}
tags = {
   names  = { "1:main", "2:web", "3:im", "4:share", "5:file", "6:misc", "7:code", "8:gimp" },
   layout = { layouts[5], layouts[3], layouts[5], layouts[5], layouts[5],
              layouts[5], layouts[5], layouts[1],
}}
for s = 1, screen.count() do
tags[s] = awful.tag(tags.names, s, tags.layout)

end
-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "Wallpaper", "nitrogen"},
   { "Manual", terminal .. " -e man awesome" },
   { "Edit config", editor_cmd .. " " .. awful.util.getdir("config") .. "/rc.lua" },
   { "Restart", awesome.restart },
   { "Quit", awesome.quit }
}

editorsmenu = {
   { "CSSED", "cssed" },
   { "Gedit", "gedit" },
   { "Vim", "urxvt -e vim" }
}

emulatorsmenu = {
   { "Mupen64Plus", "mupen64plus"},
   { "Snes9x", "snes9x-gtk" },
   { "VBA", "urxvt -e gameboy" },
   { "ZSnes", "zsnes" }
}

foldersmenu = {
   { "Bin", "urxvt -e ranger /home/mitja/bin" },
   { "Documents", "urxvt -e ranger /home/mitja/documents" },
   { "Downloads", "urxvt -e ranger /home/mitja/downloads" },
   { "Home", "urxvt -e ranger /home/mitja/" },
   { "Images", "urxvt -e ranger /home/mitja/images" },
   { "Music", "urxvt -e ranger /home/mitja/music" },
   { "Videos", "urxvt -e ranger /home/mitja/videos" },
}

graphicsmenu = {
   { "Aseprite", "aseprite" },
   { "Blender", "blender" },
   { "GIMP", "gimp" },
   { "Inkscape", "inkscape" },
   { "LibreO Draw", "libreoffice -draw" }
}

officemenu = {
   { "LibreO Base", "libreoffice -base" },
   { "LibreO Calc", "libreoffice -calc" },
   { "LibreO Draw", "libreoffice -draw" },
   { "LibreO Impress", "libreoffice -impress" },
   { "LibreO Math", "libreoffice -math" },
   { "LibreO Writer", "libreoffice -writer" }
}

programming = {
	{ "Eclipse", "eclipse" },
	{ "Geany", "geany" }
}

soundmenu = {
   { "Alsamixer", "urxvt -e alsamixer" },
   { "Ncmpcpp", "urxvt -e ncmpcpp" },
   { "Rhythmbox", "rhythmbox" },
   { "Tuxguitar", "tuxguitar" }
}

networkmenu = {
   { "Chrome", "google-chrome" },
   { "FileZilla", "filezilla" },
   { "rTorrent", "urxvt -e rtorrent" },
   { "Weechat", "urxvt -e weechat-curses" },
   { "Wicd", "wicd-gtk" }
}

systemmenu = {
   { "Htop", "urxvt -e htop" },
   { "Lxappearance", "lxappearance" },
   { "Nitrogen", "nitrogen" },
   { "Ranger", "urxvt -e ranger" },
   { "Thunar", "thunar" },
   { "Virtualbox","virtualbox"}
}

videomenu = {
   { "Cheese", "cheese" },
   { "MKV Creator","mmg"},
   { "Totem", "totem" },
   { "VLC", "qvlc"},
   { "Xfburn", "xfburn" }
}

viewersmenu = {
   { "Comix", "comix" },
   { "Shotwell", "shotwell" }
}

myapplicationsmenu = {
   { "Editors", editorsmenu},
   { "Emulators", emulatorsmenu },
   { "Graphics", graphicsmenu },
   { "Network", networkmenu },
   { "Office", officemenu },
   { "Programming", programming },
   { "Sound", soundmenu },
   { "System", systemmenu },
   { "Video", videomenu },
   { "Viewers", viewersmenu }
}

gamesmenu = {
   { "Ascii Sector", "/home/mitja/games/asciisec/asciisec" },
   { "Openarena", "openarena" }
}

winegames = {

}

winemenu = {
{"games",winegames},
{"C: Drive","xdg-open .wine/dosdevices/c:"},
{"Configure","winecfg"},
{"Uninstaller","wine uninstaller"},
{"winetricks","winetricks"}
}


mymainmenu = awful.menu({ items = { { "Awesome", myawesomemenu },
                                    { "Applications", myapplicationsmenu },
                                    { "Folders", foldersmenu },
									{ "Games", gamesmenu },
									{ "Wine", winemenu },
                                    { "Terminal", terminal }
                                  }
                        })

mylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
-- }}}


fshomemenu = awful.menu({items = {
                             { "Bin" , function () awful.util.spawn("urxvt -e ranger /home/mitja/bin", false) end },
                             { "Documents" , function () awful.util.spawn("urxvt -e ranger /home/mitja/documents", false) end },
                             { "Downloads" , function () awful.util.spawn("urxvt -e ranger /home/mitja/downloads", false) end },
                             { "Home" , function () awful.util.spawn("urxvt -e ranger /home/mitja/", false) end },
                             { "Images" , function () awful.util.spawn("urxvt -e ranger /home/mitja/images", false) end },
                             { "Music" , function () awful.util.spawn("urxvt -e ranger /home/mitja/music", false) end },
                             { "Videos" , function () awful.util.spawn("urxvt -e ranger /home/mitja/videos", false) end }
                          }
                       })
fsrootmenu = awful.menu({items = {
                             { "Bin" , function () awful.util.spawn("urxvt -e sudo ranger /bin", false) end },
                             { "Boot" , function () awful.util.spawn("urxvt -e sudo ranger /boot", false) end },
                             { "Etc" , function () awful.util.spawn("urxvt -e sudo ranger /etc", false) end },
                             { "Media" , function () awful.util.spawn("urxvt -e ranger /media", false) end },
                             { "Opt" , function () awful.util.spawn("urxvt -e sudo ranger /opt", false) end },
                             { "Root" , function () awful.util.spawn("urxvt -e sudo ranger /", false) end },
                             { "Usr" , function () awful.util.spawn("urxvt -e sudo ranger /usr", false) end }
                          }
                       })

-- {{{ Wibox

-- Initialize widget
memwidget = widget({ type = "textbox" })
-- Register widget
vicious.register(memwidget, vicious.widgets.mem, "$2MB", 21)
memicon = widget({ type = "imagebox" })
memicon.image = image(beautiful.mem_icon)

memwidget:buttons(awful.util.table.join(
        awful.button({ }, 1, function () awful.util.spawn("urxvt -e htop", true) end),
    awful.button({ }, 3, function () awful.util.spawn("urxvt -e top", true) end)
))

memicon:buttons(awful.util.table.join(
        awful.button({ }, 1, function () awful.util.spawn("urxvt -e htop", true) end),
    awful.button({ }, 3, function () awful.util.spawn("urxvt -e top", true) end)
))

-- Initialize widget
cpuwidget = widget({ type = "textbox" })
-- Register widget
vicious.register(cpuwidget, vicious.widgets.cpu, "$2%  $3%", 3)
cpuicon = widget({ type = "imagebox" })
cpuicon.image = image(beautiful.cpu_icon)

cpuwidget:buttons(awful.util.table.join(
        awful.button({ }, 1, function () awful.util.spawn("urxvt -e htop", true) end),
    awful.button({ }, 3, function () awful.util.spawn("urxvt -e top", true) end)
))

cpuicon:buttons(awful.util.table.join(
        awful.button({ }, 1, function () awful.util.spawn("urxvt -e htop", true) end),
    awful.button({ }, 3, function () awful.util.spawn("urxvt -e top", true) end)
))

--initialize
netwidget = widget({ type = "textbox" })
--register
vicious.register(netwidget, vicious.widgets.net,"${wlan0 down_kb}kB/s <span color='#0075a3'>::</span> ${wlan0 up_kb}kB/s", 1)

downicon = widget({ type = "imagebox" })
downicon.image = image(beautiful.net_down_icon)
upicon = widget({ type = "imagebox" })
upicon.image = image(beautiful.net_up_icon)

--initialize
fswidget1 = widget({ type = "textbox" })
fswidget2 = widget({ type = "textbox" })
--register
vicious.register(fswidget1, vicious.widgets.fs, "${/ avail_gb}GB", 63)
vicious.register(fswidget2, vicious.widgets.fs, "${/home avail_gb}GB", 63)
fsicon1 = widget({ type = "imagebox" })
fsicon2 = widget({type= "imagebox" })
fsicon1.image = image(beautiful.fs1_icon)
fsicon2.image = image(beautiful.fs2_icon)

fsicon1:buttons(awful.util.table.join(
                                         awful.button({ }, 1, function () fsrootmenu:toggle() end )
                                   ))
fsicon2:buttons(awful.util.table.join(
                                         awful.button({ }, 1, function () fshomemenu:toggle() end )
                                   ))

fswidget1:buttons(awful.util.table.join(
                                         awful.button({ }, 1, function () fsrootmenu:toggle() end )
                                   ))
fswidget2:buttons(awful.util.table.join(
                                         awful.button({ }, 1, function () fshomemenu:toggle() end )
                                   ))
wifiwidget = awful.widget.progressbar()
wifiwidget:set_width(50)
wifiwidget:set_height(6)
wifiwidget:set_vertical(false)
wifiwidget:set_background_color("#333333")
wifiwidget:set_border_color(nil)
wifiwidget:set_color("#ffffff")
awful.widget.layout.margins[wifiwidget.widget] = { top = 2 }
vicious.register(wifiwidget, vicious.widgets.wifi, "${link}", 27, "wlan0")


wifiicon = widget ({type = "imagebox" })
wifiicon.image = image(beautiful.wifi_icon)

wifiwidget.widget:buttons(awful.util.table.join(
        awful.button({ }, 1, function () awful.util.spawn("wicd-client", true) end)
))

wifiicon:buttons(awful.util.table.join(
        awful.button({ }, 1, function () awful.util.spawn("wicd-client", true) end)
))


--initialize
batwidget = awful.widget.progressbar()
batwidget:set_width(50)
batwidget:set_height(6)
batwidget:set_vertical(false)
batwidget:set_background_color("#333333")
batwidget:set_border_color(nil)
batwidget:set_color("#ffffff")
awful.widget.layout.margins[batwidget.widget] = { top = 2 }
vicious.register(batwidget, vicious.widgets.bat, "$2", 61, "BAT0")

baticon = widget({ type = "imagebox" })
vicious.register(baticon, vicious.widgets.bat,
function (widget, args)
                                if args[2] > 10 then
                                        baticon.image = image(beautiful.bat_f_icon)
                                elseif args[2] > 10 then
                                        baticon.image = image(beautiful.bat_l_icon)
                                else
                                        baticon.image = image(beautiful.bat_e_icon)
                                        end
                                end,
                                61, "BAT0")

-- Initialize widget
volwidget = awful.widget.progressbar()
volwidget:set_width(50)
volwidget:set_height(6)
volwidget:set_vertical(false)
volwidget:set_background_color("#333333")
volwidget:set_border_color(nil)
volwidget:set_color("#ffffff")
awful.widget.layout.margins[volwidget.widget] = { top = 2 }
vicious.register(volwidget, vicious.widgets.volume, "$1", 3, "Master")


volicon = widget ({type = "imagebox" })
vicious.register(volicon, vicious.widgets.volume,
function (widget, args)
                                if args[1] == 0 or args[2] == "♩" then
                                        volicon.image = image(beautiful.volume2_icon)
                                else
                                        volicon.image = image(beautiful.volume_icon)
                                        end
                                end,
                                1, "Master")

volicon:buttons(awful.util.table.join(
    awful.button({ }, 1, function () awful.util.spawn("amixer -q sset Master toggle", false) end),
    awful.button({ }, 3, function () awful.util.spawn("urxvt -e alsamixer", true) end),
    awful.button({ }, 4, function () awful.util.spawn("amixer -q sset Master 1dB+", false) end),
    awful.button({ }, 5, function () awful.util.spawn("amixer -q sset Master 1dB-", false) end)
))

volwidget.widget:buttons(awful.util.table.join(
    awful.button({ }, 1, function () awful.util.spawn("amixer -q sset Master toggle", false) end),
    awful.button({ }, 3, function () awful.util.spawn("urxvt -e alsamixer", true) end),
    awful.button({ }, 4, function () awful.util.spawn("amixer -q sset Master 1dB+", false) end),
    awful.button({ }, 5, function () awful.util.spawn("amixer -q sset Master 1dB-", false) end)
))



-- Create space widgets
line = widget({ type = "textbox" })
line.text = " <span color='#0075a3'>|</span> "
space = widget({ type = "textbox" })
space.text = " "

text1 = widget({ type = "textbox" })
text1.text = "Bat:  "
text2 = widget({ type = "textbox" })
text2.text = "Wifi:  "
text3 = widget({ type = "textbox" })
text3.text = "Vol:  "


-- Create a textclock widget
clockicon = widget ({type = "imagebox" })
clockicon.image = image(beautiful.clock_icon)
mytextclock = awful.widget.textclock({ align = "right" })

clockicon:buttons(awful.util.table.join(
    awful.button({ }, 1, function () awful.util.spawn("/home/mitja/.config/awesome/awesome_calendar", false) end)
))
mytextclock:buttons(awful.util.table.join(
    awful.button({ }, 1, function () awful.util.spawn("/home/mitja/.config/awesome/awesome_calendar", false) end)
))

-- Create a systray
mysystray = widget({ type = "systray" })

-- Create a wibox for each screen and add it
mywibox = {}
mysecondwibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if not c:isvisible() then
                                                  awful.tag.viewonly(c:tags()[1])
                                              end
                                              client.focus = c
                                              c:raise()
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", height = "12", screen = s })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            mytaglist[s],
            mylayoutbox[s],
            mypromptbox[s],
            layout = awful.widget.layout.horizontal.leftright,
            s == 1 and mysystray or nil
        },
        mytextclock,
        clockicon,
        line,
		batwidget.widget,
		space,
		baticon,
		--text1,
		line,
		wifiwidget.widget,
		space,
		wifiicon,
		--text2,
		line,
		volwidget.widget,
		space,
		volicon,
		--text3,
		line,
		fswidget2,
		space,
		fsicon2,
		line,
		fswidget1,
		space,
		fsicon1,
		line,
		upicon,
		space,
		netwidget,
		space,
		downicon,
		line,
        memwidget,
        space,
        memicon,
        line,
        cpuwidget,
        space,
        cpuicon,
--      mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }
    
    --Create 2nd wibox
    --mysecondwibox[s] = awful.wibox({ position = "bottom", height = "12", screen = s })
    -- Add widgets to the 2nd wibox
    --mysecondwibox[s].widgets = {
		--{
			--layout = awful.widget.layout.horizontal.leftright,
		--},
        --layout = awful.widget.layout.horizontal.rightleft
    --}
    
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    -- Custom key bindings
    awful.key({ modkey,           }, "c", function() awful.util.spawn("google-chrome") end),
    awful.key({ modkey,           }, "b", function() awful.util.spawn("urxvt -e rtorrent") end),
    awful.key({ modkey,           }, "f", function() awful.util.spawn("urxvt -e ranger") end),
    awful.key({ modkey,           }, "v", function() awful.util.spawn("rhythmbox") end),
    awful.key({ modkey,           }, "g", function() awful.util.spawn("geany") end),
    awful.key({ modkey, "Shift"   }, "x", function() awful.util.spawn("xflock4") end),
    awful.key({ modkey, "Shift"   }, "s", function() awful.util.spawn("xfce4-screenshooter") end),
    awful.key({ modkey,           }, "Up", function() awful.util.spawn("amixer -q sset Master 1dB+", false) end),
    awful.key({ modkey,           }, "Down", function() awful.util.spawn("amixer -q sset Master 1dB-", false) end),
    awful.key({ modkey, "Shift"   }, "Down", function() awful.util.spawn("amixer -q sset Master toggle", false) end),
    awful.key({ modkey,           }, "s", function() awful.util.spawn("/home/mitja/.config/awesome/start_terminals") end),
    awful.key({ modkey,           }, "y", function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),


    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show({keygrabber=true}) end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

    -- Prompt
    awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey, "Shift"   }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",      function (c) c.minimized = not c.minimized    end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     size_hints_honor = false } },
    { rule = { class = "MPlayer" },
      properties = { floating = true } },
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    { rule = { class = "gimp" },
      properties = { floating = true } },
    -- Set Firefox to always map on tags number 2 of screen 1.
    -- { rule = { class = "Firefox" },
    --   properties = { tag = tags[1][2] } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
awful.util.spawn_with_shell("/home/mitja/./.autostart")
awful.util.spawn_with_shell("run_once xfce4-volumed")
awful.util.spawn_with_shell("run_once xcompmgr")
awful.util.spawn_with_shell("run_once gnome-power-manager")
